{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9Rd0cbhsdJTW",
        "outputId": "e98cfa0d-7448-4e99-b81f-6429d16e594d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1------------------------------------------\n",
            "2------------------------------------------\n",
            "Name: Nawaz Ali, Dept: Marketing\n",
            "Employee id: 102, Salary: 30000\n",
            "3------------------------------------------\n",
            "Collect work distribution details from the HR Department.\n",
            "4------------------------------------------\n",
            "Name: Nawaz Ali, Dept: Marketing\n",
            "Employee id: 102, Salary: 33000.0\n",
            "5------------------------------------------\n",
            "Name: Nadvi, Dept: Human Resource\n",
            "Employee id: 311, Salary: 30000\n",
            "Employee Type: Foreign\n",
            "6------------------------------------------\n",
            "Collect work distribution details from the manager.\n",
            "7------------------------------------------\n",
            "Name: Nadvi, Dept: Human Resource\n",
            "Employee id: 311, Salary: 33000.0\n",
            "Employee Type: Foreign\n",
            "8------------------------------------------\n",
            "9------------------------------------------\n",
            "Name: Asif, Dept: Sales\n",
            "Employee id: 210, Salary: 15000\n",
            "Employee Type: Part Time\n",
            "10------------------------------------------\n",
            "Collect work distribution details from the HR Department.\n",
            "11------------------------------------------\n",
            "Sadly, there is no increment for the part time employess!\n",
            "12------------------------------------------\n",
            "Name: Olive, Dept: Accounts\n",
            "Employee id: 223, Salary: 15000\n",
            "Employee Type: Part Time\n"
          ]
        }
      ],
      "source": [
        "#Lab Work Home Task 1\n",
        "#Parent Class\n",
        "class Employee:\n",
        "  def __init__(self, name, id, dept):\n",
        "    self.name = name\n",
        "    self.id = id\n",
        "    self.dept = dept\n",
        "    self.salary = 30000\n",
        "    self.salary_part = 15000\n",
        "    self.employee_type = 'Regular'\n",
        "\n",
        "  def employeeDetails(self):\n",
        "    print(f'Name: {self.name}, Dept: {self.dept}')\n",
        "    if self.employee_type == 'Regular':\n",
        "      print(f'Employee id: {self.id}, Salary: {self.salary}')\n",
        "    elif self.employee_type == 'Foreign':\n",
        "      print(f'Employee id: {self.id}, Salary: {self.salary}')\n",
        "      print(f'Employee Type: {self.employee_type}')\n",
        "    elif self.employee_type == 'Part Time':\n",
        "      print(f'Employee id: {self.id}, Salary: {self.salary_part}')\n",
        "      print(f'Employee Type: {self.employee_type}')\n",
        "\n",
        "  def workDistribution(self, dept):\n",
        "    if self.dept == 'Human Resource':\n",
        "      print(f'Collect work distribution details from the manager.')\n",
        "    else:\n",
        "      print(f'Collect work distribution details from the HR Department.')\n",
        "\n",
        "  def increment(self):\n",
        "    self.increment_rate = 0.1\n",
        "    self.salary += self.salary * self.increment_rate\n",
        "\n",
        "#Child Class\n",
        "class Foreign_employee(Employee):\n",
        "  def __init__(self, name, id, dept):\n",
        "    super().__init__(name, id, dept)\n",
        "    self.employee_type = 'Foreign'\n",
        "\n",
        "  def increment(self):\n",
        "    self.increment = 0.15\n",
        "    super().increment()\n",
        "\n",
        "#Child Class\n",
        "class Part_time_employee(Employee):\n",
        "  def __init__(self, name, id, dept):\n",
        "    super().__init__(name, id, dept)\n",
        "    self.employee_type = 'Part Time'\n",
        "\n",
        "  def increment(self):\n",
        "    print(f'Sadly, there is no increment for the part time employess!')\n",
        "\n",
        "\n",
        "#Driver Code\n",
        "print(\"1------------------------------------------\")\n",
        "emp1=Employee(\"Nawaz Ali\", 102, \"Marketing\")\n",
        "print(\"2------------------------------------------\")\n",
        "emp1.employeeDetails()\n",
        "print(\"3------------------------------------------\")\n",
        "emp1.workDistribution(\"Marketing\")\n",
        "print(\"4------------------------------------------\")\n",
        "emp1.increment()\n",
        "emp1.employeeDetails()\n",
        "print(\"5------------------------------------------\")\n",
        "f_emp=Foreign_employee(\"Nadvi\", 311, \"Human Resource\")\n",
        "f_emp.employeeDetails()\n",
        "print(\"6------------------------------------------\")\n",
        "f_emp.workDistribution(\"Human Resource\")\n",
        "print(\"7------------------------------------------\")\n",
        "f_emp.increment()\n",
        "f_emp.employeeDetails()\n",
        "print(\"8------------------------------------------\")\n",
        "p1_emp=Part_time_employee(\"Asif\", 210, \"Sales\")\n",
        "p2_emp=Part_time_employee(\"Olive\", 223, \"Accounts\")\n",
        "print(\"9------------------------------------------\")\n",
        "p1_emp.employeeDetails()\n",
        "print(\"10------------------------------------------\")\n",
        "p1_emp.workDistribution(\"Sales\")\n",
        "print(\"11------------------------------------------\")\n",
        "p2_emp.increment()\n",
        "print(\"12------------------------------------------\")\n",
        "p2_emp.employeeDetails()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Lab Work Home Task 2\n",
        "#Parent Class\n",
        "class Exam:\n",
        "  def __init__(self,marks):\n",
        "    self.marks = marks\n",
        "    self.time = 60\n",
        "\n",
        "  def examSyllabus(self):\n",
        "    return \"Maths , English\"\n",
        "\n",
        "  def examParts(self):\n",
        "    return \"Part 1 - Maths\\nPart 2 - English\\n\"\n",
        "\n",
        "#Child Class\n",
        "class ScienceExam(Exam):\n",
        "  def __init__(self, marks, time, *subjects):\n",
        "    super().__init__(marks)\n",
        "    self.time = time\n",
        "    self.subject = subjects\n",
        "\n",
        "  def examSyllabus(self):\n",
        "    subject = ' ,' + ' ,'.join(self.subject)\n",
        "    return super().examSyllabus() + subject\n",
        "\n",
        "  def examParts(self):\n",
        "    subject = ''\n",
        "    parts = 3\n",
        "    for sub in self.subject:\n",
        "      subject += f'Part {parts} - {sub}\\n'\n",
        "      parts += 1\n",
        "    return super().examParts() + subject\n",
        "\n",
        "  def __str__(self):\n",
        "    return f'Marks: {self.marks} Time: {self.time} minutes Number of Parts: {2 + len(self.subject)}'\n",
        "\n",
        "#Driver Code\n",
        "engineering = ScienceExam(100,90,\"Physics\",\"HigherMaths\")\n",
        "print(engineering)\n",
        "print('----------------------------------')\n",
        "print(engineering.examSyllabus())\n",
        "print(engineering.examParts())\n",
        "print('==================================')\n",
        "architecture = ScienceExam(100,120,\"Physics\",\"HigherMaths\",\"Drawing\")\n",
        "print(architecture)\n",
        "print('----------------------------------')\n",
        "print(architecture.examSyllabus())\n",
        "print(architecture.examParts())"
      ],
      "metadata": {
        "id": "BNdXezkljurE",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4fdd3867-51ea-4a72-9f88-7deac9c11cfb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Marks: 100 Time: 90 minutes Number of Parts: 4\n",
            "----------------------------------\n",
            "Maths , English ,Physics ,HigherMaths\n",
            "Part 1 - Maths\n",
            "Part 2 - English\n",
            "Part 3 - Physics\n",
            "Part 4 - HigherMaths\n",
            "\n",
            "==================================\n",
            "Marks: 100 Time: 120 minutes Number of Parts: 5\n",
            "----------------------------------\n",
            "Maths , English ,Physics ,HigherMaths ,Drawing\n",
            "Part 1 - Maths\n",
            "Part 2 - English\n",
            "Part 3 - Physics\n",
            "Part 4 - HigherMaths\n",
            "Part 5 - Drawing\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Lab Work Home Task 3\n",
        "#Parent Class\n",
        "class PokemonBasic:\n",
        "  def __init__(self, name = 'Default', hp = 0, weakness = 'None', type = 'Unknown'):\n",
        "    self.name = name\n",
        "    self.hit_point = hp\n",
        "    self.weakness = weakness\n",
        "    self.type = type\n",
        "\n",
        "  def get_type(self):\n",
        "    return 'Main type: ' + self.type\n",
        "\n",
        "  def get_move(self):\n",
        "    return 'Basic move: ' + 'Quick Attack'\n",
        "\n",
        "  def __str__(self):\n",
        "    return \"Name: \" + self.name + \", HP: \" + str(self.hit_point) + \", Weakness: \" + self.weakness\n",
        "\n",
        "#Child Class\n",
        "class PokemonExtra(PokemonBasic):\n",
        "  def __init__(self, name, hp, weakness, type, secondary_type = None, other_move = None):\n",
        "    super().__init__(name, hp, weakness, type)\n",
        "    self.secondary_type = secondary_type\n",
        "    self.other_move = other_move\n",
        "\n",
        "  def get_type(self):\n",
        "    if self.secondary_type == None:\n",
        "      return (super().get_type())\n",
        "    else:\n",
        "      return (f\"{super().get_type()}, Secondary type: {self.secondary_type}\")\n",
        "\n",
        "  def get_move(self):\n",
        "    if self.other_move == None:\n",
        "      return (super().get_move())\n",
        "    else:\n",
        "      return (f\"{super().get_move()}\\nOther move: {', '.join(self.other_move)}\")\n",
        "\n",
        "#Driver Code\n",
        "print('\\n------------Basic Info:--------------')\n",
        "pk = PokemonBasic()\n",
        "print(pk)\n",
        "print(pk.get_type())\n",
        "print(pk.get_move())\n",
        "\n",
        "print('\\n------------Pokemon 1 Info:-------------')\n",
        "charmander = PokemonExtra('Charmander', 39, 'Water', 'Fire')\n",
        "print(charmander)\n",
        "print(charmander.get_type())\n",
        "print(charmander.get_move())\n",
        "\n",
        "print('\\n------------Pokemon 2 Info:-------------')\n",
        "charizard = PokemonExtra('Charizard', 78, 'Water', 'Fire', 'Flying', ('Fire Spin', 'Fire Blaze'))\n",
        "print(charizard)\n",
        "print(charizard.get_type())\n",
        "print(charizard.get_move())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EMUWCbz8Scme",
        "outputId": "a9dcba68-2520-4797-d68f-281eadf0f78d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "------------Basic Info:--------------\n",
            "Name: Default, HP: 0, Weakness: None\n",
            "Main type: Unknown\n",
            "Basic move: Quick Attack\n",
            "\n",
            "------------Pokemon 1 Info:-------------\n",
            "Name: Charmander, HP: 39, Weakness: Water\n",
            "Main type: Fire\n",
            "Basic move: Quick Attack\n",
            "\n",
            "------------Pokemon 2 Info:-------------\n",
            "Name: Charizard, HP: 78, Weakness: Water\n",
            "Main type: Fire, Secondary type: Flying\n",
            "Basic move: Quick Attack\n",
            "Other move: Fire Spin, Fire Blaze\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Lab Work Home Task 4\n",
        "#Parent Class\n",
        "class Cakes:\n",
        "  cake_price_dictt = {'regular': 1200, 'cheese': 1500}\n",
        "  order_list = {}\n",
        "  feedback_dictt = {}\n",
        "  def __init__(self, flavor, weight):\n",
        "    self.flavor = flavor\n",
        "    self.weight = weight\n",
        "    self.sugar_level = 'Moderate'\n",
        "    self.cream_type = 'Whipped Cream'\n",
        "    self.price = self.weight * (1200/1000)\n",
        "    self.add_order_list()\n",
        "\n",
        "  def add_order_list(self):\n",
        "    cake_name = f'{self.flavor} Cake {self.weight} gm'\n",
        "    if cake_name in Cakes.order_list:\n",
        "      Cakes.order_list[cake_name] += 1\n",
        "    else:\n",
        "      Cakes.order_list[cake_name] = 1\n",
        "\n",
        "\n",
        "  def add_customization(self, sugar_level, cream_type):\n",
        "    self.sugar_level = sugar_level\n",
        "    self.cream_type = cream_type\n",
        "\n",
        "  def cake_details(self):\n",
        "    print(f'Flavor: {self.flavor} Cake, Weight: {self.weight} gm')\n",
        "    print(f'Sweetness: {self.sugar_level} sugar, Cream Type: {self.cream_type}')\n",
        "    print(f'Price: {self.price} Taka')\n",
        "\n",
        "  @classmethod\n",
        "  def give_feedbacks(cls, flavor, feedback):\n",
        "    print(f'Thanks for your valuable feedback!')\n",
        "    if flavor in cls.feedback_dictt:\n",
        "      cls.feedback_dictt[flavor].append(feedback)\n",
        "    else:\n",
        "      cls.feedback_dictt[flavor] = [feedback]\n",
        "    if 'Cheese Cake' in flavor:\n",
        "      print(f'You will get 10% discount for your nect purchase!')\n",
        "\n",
        "  @classmethod\n",
        "  def show_feedbacks(cls):\n",
        "    print(f'{cls.feedback_dictt}')\n",
        "\n",
        "#Child Class\n",
        "class Cheese_Cakes(Cakes):\n",
        "  def __init__(self, flavor, weight, cake_type = 'Baked'):\n",
        "    super().__init__(flavor, weight)\n",
        "    self.cake_type = cake_type\n",
        "    self.price = self.weight * (1500/1000)\n",
        "\n",
        "  def add_customization(self):\n",
        "    print('Sorry! No customization available for cheese cakes.')\n",
        "\n",
        "  def cake_details(self):\n",
        "    print(f'Flavor: {self.flavor} Cheese Cake, Weight: {self.weight} gm')\n",
        "    print(f'Sweetness: {self.sugar_level} sugar, Cream Type: {self.cream_type}')\n",
        "    print(f'Cake Type: {self.cake_type}, Price: {self.price} Taka')\n",
        "\n",
        "\n",
        "#Driver Code\n",
        "order_1=Cakes(\"Chocolate\",500)\n",
        "order_2=Cakes(\"Vanilla\",800)\n",
        "print(\"(1)**********************************\")\n",
        "order_1.cake_details()\n",
        "print(\"(1.1)**********************************\")\n",
        "print(Cakes.order_list)\n",
        "print(\"(2)**********************************\")\n",
        "order_2.add_customization(\"Zero\",\"Butter Cream\")\n",
        "order_2.cake_details()\n",
        "print(\"(3)**********************************\")\n",
        "Cakes.give_feedbacks(\"Chocolate Cake\",\"Very Delicious\")\n",
        "Cakes.give_feedbacks(\"Chocolate Cake\",\"Yummy\")\n",
        "print(\"(4)**********************************\")\n",
        "Cakes.show_feedbacks()\n",
        "print(\"(5)**********************************\")\n",
        "ch_order1=Cheese_Cakes(\"Red velvet\",700)\n",
        "ch_order1.cake_details()\n",
        "print(\"(6)**********************************\")\n",
        "ch_order1.add_customization()\n",
        "print(\"(7)**********************************\")\n",
        "ch_order2=Cheese_Cakes(\"Blue Berry\",900,\"No Bake\")\n",
        "ch_order2.cake_details()\n",
        "print(\"(8)**********************************\")\n",
        "print(Cakes.order_list)\n",
        "print(\"(9)**********************************\")\n",
        "Cheese_Cakes.give_feedbacks(\"Red velvet Cheese Cake\",\"Average\")\n",
        "Cheese_Cakes.give_feedbacks(\"Blue Berry Cheese Cake\",\"Liked it\")\n",
        "print(\"(10)**********************************\")\n",
        "Cakes.show_feedbacks()"
      ],
      "metadata": {
        "id": "W2AN11fnJYYi",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0ba618ed-f26f-4aa1-8779-36aa0f11fec9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(1)**********************************\n",
            "Flavor: Chocolate Cake, Weight: 500 gm\n",
            "Sweetness: Moderate sugar, Cream Type: Whipped Cream\n",
            "Price: 600.0 Taka\n",
            "(1.1)**********************************\n",
            "{'Chocolate Cake 500 gm': 1, 'Vanilla Cake 800 gm': 1}\n",
            "(2)**********************************\n",
            "Flavor: Vanilla Cake, Weight: 800 gm\n",
            "Sweetness: Zero sugar, Cream Type: Butter Cream\n",
            "Price: 960.0 Taka\n",
            "(3)**********************************\n",
            "Thanks for your valuable feedback!\n",
            "Thanks for your valuable feedback!\n",
            "(4)**********************************\n",
            "{'Chocolate Cake': ['Very Delicious', 'Yummy']}\n",
            "(5)**********************************\n",
            "Flavor: Red velvet Cheese Cake, Weight: 700 gm\n",
            "Sweetness: Moderate sugar, Cream Type: Whipped Cream\n",
            "Cake Type: Baked, Price: 1050.0 Taka\n",
            "(6)**********************************\n",
            "Sorry! No customization available for cheese cakes.\n",
            "(7)**********************************\n",
            "Flavor: Blue Berry Cheese Cake, Weight: 900 gm\n",
            "Sweetness: Moderate sugar, Cream Type: Whipped Cream\n",
            "Cake Type: No Bake, Price: 1350.0 Taka\n",
            "(8)**********************************\n",
            "{'Chocolate Cake 500 gm': 1, 'Vanilla Cake 800 gm': 1, 'Red velvet Cake 700 gm': 1, 'Blue Berry Cake 900 gm': 1}\n",
            "(9)**********************************\n",
            "Thanks for your valuable feedback!\n",
            "You will get 10% discount for your nect purchase!\n",
            "Thanks for your valuable feedback!\n",
            "You will get 10% discount for your nect purchase!\n",
            "(10)**********************************\n",
            "{'Chocolate Cake': ['Very Delicious', 'Yummy'], 'Red velvet Cheese Cake': ['Average'], 'Blue Berry Cheese Cake': ['Liked it']}\n"
          ]
        }
      ]
    }
  ]
}
